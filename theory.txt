
# Терминология реляционных баз данных:
На примере таблицы Сотрудник рассмотрим терминологию реляционных баз данных:
-отношение  – это структура данных целиком, набор записей (в обычном понимании – таблица) , в  примере –это Сотрудник;
-кортеж – это каждая строка , содержащая данные (более распространенный термин – запись ), например, <001, Борин С.А,
 234-01-23, программист>, все кортежи в отношении должны быть различны;
-мощность – число кортежей в таблице (проще говоря, число записей), в данном случае 3, мощность отношения может быть
любой (от 0 до бесконечности), порядок следования кортежей - неважен;
-атрибут – это столбец в таблице (более распространенный термин – поле ), в примере – Табельный номер, Фамилия И.О.,
Телефон, Должность)
-размерность – это число атрибутов в таблице, в данном случае – 4;
-размерность отношения должна быть больше 0, порядок следования атрибутов существенен;
-домен атрибута – это допустимые значения (неповторяющиеся), которые можно занести в поле , например для атрибута
Должность домен – {инженер, программист}.

Ключевое поле, которое является ОБЯЗАТЕЛЬНЫМ ЭЛЕМЕНТОМ каждой реляционной таблицы. Ключевое поле является
уникальным для каждой записи, однозначно определяет запись и в дальнейшем будет использоваться для связей с другими
таблицами.
Для описания ключевого поля используйте описание INT PRIMARY KEY AUTO_INCREMENT. Это значит, что в поле будут
заноситься различные целые числа, при этом они будут автоматически генерироваться (каждая следующая строка будет иметь
значение ключа на 1 больше предыдущего).



#--------------------------------Основные типы данных SQL
Тип данных
//Описание
//Пример

INT, INTEGER
// Целое число, могут принимать значения от -2 147 483 648 до 2 147 483 647
// -567, 1205

DECIMAL, NUMERIC
// Вещественное число, в скобках указывается максимальная длина числа (включает символы слева и справа от десятичной
запятой) и количество знаков после запятой.
Можно использовать оба этих типа, они эквивалентны, принимают значения в диапазоне -1038+1 до 1038-1 (DECIMAL(4,1),
NUMERIC(6,3))
//34.6, -3.294

DATE
// Дата в формате ГГГГ-ММ-ДД (26 июля 2020 года, 3 января 2021 года)
//2020-07-26 , 2021-01-03

VARCHAR
// Строка длиной не более 255 символов, в скобках указывается максимальная длина строки, которая может храниться в поле
VARCHAR(10)(рассматриваются однобайтовые кодировки, для которых число в скобках соответствует максимальному
количеству символов в строке)
// пример, описание


#---------------------------Множество  математических функций для работы с числовыми данными
Функция
//Описание
//Пример

CEILING(x)
// возвращает наименьшее целое число, большее или равное x (округляет до целого числа в большую сторону)
// CEILING(4.2)=5, CEILING(-5.8)=-5

ROUND(x, k)
//округляет значение x до k знаков после запятой, если k не указано – x округляется до целого
//ROUND(4.361)=4, ROUND(5.86592,1)=5.9

FLOOR(x)
// возвращает наибольшее целое число, меньшее или равное x (округляет до  целого числа в меньшую сторону)
// FLOOR(4.2)=4, FLOOR(-5.8)=-6

POWER(x, y)
//возведение x в степень y
//POWER(3,4)=81.0

SQRT(x)
//квадратный корень из x
//SQRT(4)=2.0б SQRT(2)=1.41...

DEGREES(x)
//конвертирует значение x из радиан в градусы
//DEGREES(3) = 171.8...

RADIANS(x)
//конвертирует значение x из градусов в радианы
//RADIANS(180)=3.14...

ABS(x)
//модуль числа x
//ABS(-1) = 1, ABS(1) = 1

PI()
//pi = 3.1415926...


#----------------------------Приоритеты операций:
круглые скобки
умножение  (*),  деление (/)
сложение  (+), вычитание (-)
операторы сравнения (=, >, <, >=, <=, <>)
NOT
AND
OR


# -----------------------Логический порядок операций для запроса SQL следующий:
FROM
WHERE
SELECT
ORDER BY

# Порядок
В логическом выражении после WHERE нельзя использовать названия столбцов, присвоенные им с помощью AS,  так как при
выполнении запроса сначала вычисляется логическое выражение для каждой строки исходной таблицы, выбираются строки,
для которых оно истинно. А только после этого формируется "шапка запроса" – столбцы, включаемые в запрос.


# -----------------------Выборка данных, оператор LIKE:
Символ-шаблон
//Описание
//Пример

%
//Любая строка, содержащая ноль или более символов
//SELECT * FROM book WHERE author LIKE '%М.%' (выполняет поиск и выдает все книги, инициалы авторов которых
содержат «М.»)

_ (подчеркивание)
//Любой одиночный символ
//SELECT * FROM book WHERE title LIKE 'Поэм_' (выполняет поиск и выдает все книги, названия которых либо «Поэма»,
либо «Поэмы» и пр.)

# Вывести названия книг, начинающихся с буквы «Б».
//SELECT title FROM bookvWHERE title LIKE 'Б%';
/* эквивалентное условие title LIKE 'б%'*/

# Вывести название книг, состоящих ровно из 5 букв.
//SELECT title FROM book WHERE title LIKE "_____"

# Вывести книги, название которых длиннее 5 символов:
SELECT title FROM book WHERE title LIKE "______%";
/* эквивалентные условия title LIKE "%______" title LIKE "%______%" */

# Вывести названия книг, которые содержат букву "и" как отдельное слово, если считать, что слова в названии отделяются
# друг от друга пробелами и не содержат знаков препинания.
//SELECT title FROM book
WHERE   title LIKE "_% и _%" /*отбирает слово И внутри названия */
    OR title LIKE "и _%" /*отбирает слово И в начале названия */
    OR title LIKE "_% и" /*отбирает слово И в конце названия */
    OR title LIKE "и" /* отбирает название, состоящее из одного слова И */

# Вывести названия книг, которые состоят ровно из одного слова, если считать, что слова в названии отделяются друг от
# друга пробелами. Отсутствие пробела в названии означает, что оно состоит из одного слова. Чтобы это проверить
# используется оператор NOT LIKE, который в данном случае отберет все названия, в которых нет пробелов.
//SELECT title FROM book WHERE title NOT LIKE "% %";